// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tm/tagmsg.proto

/*
Package tm is a generated protocol buffer package.

Put Service

Put Service API consists of a single service which returns a message.

It is generated from these files:
	tm/tagmsg.proto

It has these top-level messages:
	PutRequest
	PutResponse
	SearchRequest
	SearchResponse
	SearchResult
*/
package tm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Put Request parameters.
type PutRequest struct {
	// Client IP represents the message identifier.
	ClientIp string `protobuf:"bytes,1,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	// Server IP represents the message identifier.
	ServerIp string `protobuf:"bytes,2,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	// Tags.
	Tags map[string]string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The message to be saved.
	Message string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PutRequest) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *PutRequest) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *PutRequest) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *PutRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Message for Put Response from Put Request.
type PutResponse struct {
	// The request saved.
	ResponseMsg bool `protobuf:"varint,1,opt,name=response_msg,json=responseMsg" json:"response_msg,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PutResponse) GetResponseMsg() bool {
	if m != nil {
		return m.ResponseMsg
	}
	return false
}

// Message for Search Request.
type SearchRequest struct {
	// Client IP represents the message identifier.
	ClientIp string `protobuf:"bytes,1,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	// Server IP represents the message identifier.
	ServerIp string `protobuf:"bytes,2,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	// Tags.
	Tags map[string]string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchRequest) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *SearchRequest) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *SearchRequest) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Message Collection of Response for Search Request.
type SearchResponse struct {
	SearchResult []*SearchResult `protobuf:"bytes,1,rep,name=searchResult" json:"searchResult,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SearchResponse) GetSearchResult() []*SearchResult {
	if m != nil {
		return m.SearchResult
	}
	return nil
}

// Search Request Result
type SearchResult struct {
	// Client IP represents the message identifier.
	ClientIp string `protobuf:"bytes,1,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	// Server IP represents the message identifier.
	ServerIp string `protobuf:"bytes,2,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	// Tags.
	Tags map[string]string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The message to be saved.
	Message string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SearchResult) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *SearchResult) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *SearchResult) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SearchResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*PutRequest)(nil), "tagmsg.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "tagmsg.PutResponse")
	proto.RegisterType((*SearchRequest)(nil), "tagmsg.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "tagmsg.SearchResponse")
	proto.RegisterType((*SearchResult)(nil), "tagmsg.SearchResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TagMsgService service

type TagMsgServiceClient interface {
	// Put method receives a PutRequest parameter.
	// The message posted as the id parameter will also be returned.
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Search method receive SearchRequest parameter
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type tagMsgServiceClient struct {
	cc *grpc.ClientConn
}

func NewTagMsgServiceClient(cc *grpc.ClientConn) TagMsgServiceClient {
	return &tagMsgServiceClient{cc}
}

func (c *tagMsgServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/tagmsg.TagMsgService/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMsgServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/tagmsg.TagMsgService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TagMsgService service

type TagMsgServiceServer interface {
	// Put method receives a PutRequest parameter.
	// The message posted as the id parameter will also be returned.
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Search method receive SearchRequest parameter
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
}

func RegisterTagMsgServiceServer(s *grpc.Server, srv TagMsgServiceServer) {
	s.RegisterService(&_TagMsgService_serviceDesc, srv)
}

func _TagMsgService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMsgServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tagmsg.TagMsgService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMsgServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMsgService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMsgServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tagmsg.TagMsgService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMsgServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagMsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tagmsg.TagMsgService",
	HandlerType: (*TagMsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _TagMsgService_Put_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _TagMsgService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tm/tagmsg.proto",
}

func init() { proto.RegisterFile("tm/tagmsg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x75, 0x29, 0x22, 0x0c, 0xa0, 0x66, 0x45, 0xd3, 0xa0, 0x51, 0xec, 0x89, 0x13, 0x12, 0x38,
	0x88, 0x1e, 0x4d, 0x3c, 0x60, 0x42, 0x42, 0x0a, 0x27, 0x2f, 0x64, 0x25, 0x93, 0x95, 0x48, 0xa1,
	0xee, 0x6c, 0x49, 0x48, 0xfc, 0x2f, 0x3f, 0xc2, 0x83, 0xbf, 0x64, 0xda, 0x6d, 0xd5, 0x02, 0x27,
	0x49, 0xbc, 0xed, 0xbc, 0x37, 0x7d, 0xf3, 0xe6, 0x75, 0x17, 0x0e, 0xb4, 0x77, 0xa5, 0x85, 0xf4,
	0x48, 0x36, 0x7c, 0x35, 0xd7, 0x73, 0x9e, 0x33, 0x95, 0xf3, 0xc1, 0x00, 0xfa, 0x81, 0x76, 0xf1,
	0x35, 0x40, 0xd2, 0xfc, 0x14, 0x0a, 0xe3, 0xe9, 0x04, 0x67, 0x7a, 0x34, 0xf1, 0x6d, 0x56, 0x63,
	0xf5, 0x82, 0x9b, 0x37, 0x40, 0xd7, 0x0f, 0x49, 0x42, 0xb5, 0x40, 0x15, 0x92, 0x19, 0x43, 0x1a,
	0xa0, 0xeb, 0xf3, 0x26, 0x64, 0xb5, 0x90, 0x64, 0x5b, 0x35, 0xab, 0x5e, 0x6c, 0x9d, 0x35, 0xe2,
	0x69, 0x3f, 0xda, 0x8d, 0xa1, 0x90, 0x74, 0x3f, 0xd3, 0x6a, 0xe9, 0x46, 0x9d, 0xdc, 0x86, 0x3d,
	0x0f, 0x89, 0x84, 0x44, 0x3b, 0x1b, 0x89, 0x25, 0x65, 0xf5, 0x1a, 0x0a, 0xdf, 0xcd, 0xfc, 0x10,
	0xac, 0x17, 0x5c, 0xc6, 0x66, 0xc2, 0x23, 0xaf, 0xc0, 0xee, 0x42, 0x4c, 0x03, 0x8c, 0x3d, 0x98,
	0xe2, 0x36, 0xd3, 0x61, 0x4e, 0x13, 0x8a, 0xd1, 0x40, 0xf2, 0xe7, 0x33, 0x42, 0x7e, 0x09, 0x25,
	0x15, 0x9f, 0x47, 0x1e, 0xc9, 0x48, 0x23, 0xef, 0x16, 0x13, 0xac, 0x47, 0xd2, 0x79, 0x67, 0x50,
	0x1e, 0xa0, 0x50, 0xe3, 0xe7, 0xed, 0x23, 0x68, 0xa7, 0x22, 0xb8, 0x48, 0x22, 0x48, 0xc9, 0xaf,
	0xa6, 0xf0, 0xf7, 0x5d, 0x1f, 0x60, 0x3f, 0x51, 0x8e, 0xd7, 0xed, 0x40, 0x89, 0x12, 0x24, 0x98,
	0x6a, 0x9b, 0x45, 0x3e, 0x2a, 0xab, 0x3e, 0x42, 0xce, 0x4d, 0x75, 0x3a, 0x9f, 0x0c, 0x4a, 0xbf,
	0xe9, 0x2d, 0x42, 0x68, 0xa5, 0x42, 0x38, 0xdf, 0x34, 0xfc, 0x1f, 0x6e, 0x42, 0xeb, 0x0d, 0xca,
	0x43, 0x21, 0x7b, 0x24, 0x07, 0xa8, 0x16, 0x93, 0x31, 0xf2, 0x26, 0x58, 0xfd, 0x40, 0x73, 0xbe,
	0x7e, 0x31, 0xab, 0x47, 0x29, 0xcc, 0x84, 0xe9, 0xec, 0xf0, 0x1b, 0xc8, 0x19, 0xd7, 0xfc, 0x78,
	0xe3, 0xaf, 0xac, 0x9e, 0xac, 0x2d, 0x17, 0x7f, 0x7a, 0x97, 0x7d, 0xcc, 0x68, 0xef, 0x29, 0x17,
	0x3d, 0xb5, 0xf6, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0xa3, 0xce, 0x78, 0x7d, 0x03, 0x00,
	0x00,
}
